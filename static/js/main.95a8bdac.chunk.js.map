{"version":3,"sources":["components/Header/Header.js","components/Chart/Chart.js","components/TextArea/TextArea.js","components/Footer/Footer.js","App.js","helpers/RegExp.js","helpers/DataParse.js","index.js"],"names":["Header","className","Chart","stateContext","useContext","StateContext","Options","title","text","xAxis","tickmarkPlacement","tickInterval","yAxis","labels","enabled","tooltip","backgroundColor","borderColor","borderRadius","borderWidth","style","fontSize","series","chartData","legend","layout","itemStyle","textTransform","verticalAlign","align","itemDistance","credits","plotOptions","label","connectorAllowed","marker","symbol","radius","lineWidth","pointStart","highcharts","Highcharts","options","TextArea","mode","theme","lineNumbers","editorDidMount","editor","setSize","onChange","setEditor","Footer","onClick","GenerateChart","createContext","App","useState","Editor","setChartData","alert","useAlert","Provider","value","select","getValue","DataArray","replace","split","minTime","maxTime","error","groups","groupedData","forEach","val","data","test","JSON","parse","JsonParse","regLine","type","group","begin","end","id","object","timestamp","index","toLowerCase","otherValues","Object","assign","newChartData","keys","obj","result","name","regName","push","success","clearHistory","setValue","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById"],"mappings":"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","file":"static/js/main.95a8bdac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style.css';\r\n\r\nfunction Header() {\r\n  return (\r\n      <div className=\"Header\">\r\n        <span className=\"Title\">Thiago`s Challenge</span>\r\n      </div> \r\n  );\r\n}\r\n\r\nexport default Header;","import React, { useContext } from \"react\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Highcharts from \"highcharts\";\r\nimport { StateContext } from \"../../App\";\r\n\r\nexport default function Chart() {\r\n \r\n  const stateContext = useContext(StateContext);\r\n\r\n  const Options = {\r\n    title: {\r\n      text: \"\",\r\n    },\r\n    xAxis: {  \r\n      tickmarkPlacement: 'off',\r\n      tickInterval: 1\r\n    },\r\n   yAxis:{\r\n   labels: {\r\n    enabled:false\r\n   }\r\n    \r\n   },\r\n   tooltip: {\r\n    backgroundColor: '#FCFFC5',\r\n    borderColor: 'black',\r\n    borderRadius: 10,\r\n    borderWidth: 3,\r\n    \r\n    style: {\r\n      fontSize: 15,\r\n    },\r\n},\r\n    series: stateContext?.chartData?.series || [],\r\n    legend: {\r\n        layout: 'vertical',\r\n        itemStyle: {\r\n            textTransform: 'capitalize',\r\n          \r\n        },\r\n        verticalAlign: 'top',\r\n        align: 'right',\r\n        itemDistance: 30,     \r\n    },\r\n    credits: {\r\n      enabled: false\r\n  },\r\n  plotOptions: {\r\n    series: {      \r\n        label: {\r\n            connectorAllowed: false\r\n        },\r\n        marker: {\r\n            symbol: 'circle',\r\n            radius: 6,\r\n            lineWidth: 1\r\n        },\r\n        pointStart: 0\r\n    }\r\n},\r\n\r\n   \r\n  };\r\n  return <HighchartsReact highcharts={Highcharts} options={Options} />;\r\n}\r\n\r\n\r\n","import React, { useContext } from \"react\";\r\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport { StateContext } from \"../../App\";\r\nimport './style.css';\r\n\r\n\r\n function TextArea() {\r\n  const stateContext = useContext(StateContext);\r\n  return (\r\n   <div className=\"TextArea\">\r\n      <CodeMirror\r\n        options={{\r\n          mode: \"javascript\",\r\n          theme: \"material\",\r\n          lineNumbers: true,\r\n        }}\r\n        editorDidMount={(editor) => editor.setSize(\"\", \"100%\")}\r\n        onChange={(editor) => {\r\n          stateContext.setEditor(editor);\r\n        }}\r\n      />\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default TextArea;","import React, { useContext } from \"react\";\r\nimport './style.css';\r\nimport { StateContext } from \"../../App\";\r\n\r\n\r\nfunction Footer() {\r\n  const stateContext = useContext(StateContext);\r\n  return (\r\n   \r\n      <div className=\"Footer\">\r\n        <button className=\"Button\" onClick={() => stateContext.GenerateChart()}> GENERATE CHART </button>\r\n      </div>\r\n   \r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Footer;","import React, { createContext, useState } from \"react\";\nimport { useAlert } from 'react-alert';\nimport Header from \"./components/Header/Header\";\nimport Chart from \"./components/Chart/Chart\";\nimport TextArea from \"./components/TextArea/TextArea\";\nimport Footer from \"./components/Footer/Footer\";\nimport './App.css';\nimport './helpers/RegExp';\nimport { regJson, regLine, regName } from \"./helpers/RegExp\";\nimport {JsonParse} from \"./helpers/DataParse\";\nexport const StateContext = createContext({});\n\n  function App() {\n \n  const [Editor, setEditor] = useState('');\n  const [chartData, setChartData] = useState({});\n  const alert = useAlert();\n\n  const GenerateChart = () => {\n\n    //Check if input is empty then generate an alert\n    if(!Editor) {\n    alert.error(\"Input is empty!\"); \n    return;\n    }\n    var value = Editor.getValue();\n    var DataArray = regJson(value);\n    var minTime = \"\";\n    var maxTime = \"\";\n    var error = false;\n    let select,   \n    groups = [];\n    let groupedData = {};\n \n    DataArray.forEach((val) => {\n           \n      //Check if the json is valid\n      //RegExp the data\n      let data = JsonParse(regLine(val));\n     \n      switch (data.type) {\n       \n          //Type start: Data and groups\n          case \"start\":\n\n          select = data.select;\n          groups = data.group;\n\n          break;       \n          //Type span: Set the max and min time interval allowed\n          case \"span\":\n          minTime = data.begin;\n          maxTime = data.end;\n\n          break;\n          //Type data: Check timestamps then populate groupedData\n          case \"data\":\n\n            let id = \"\";\n            let object = {};\n            \n            //If some timestamp is out of interval generate an alert\n            if(data.timestamp < minTime || data.timestamp > maxTime) {\n              alert.error(\"Timestamp out of interval allowed! \");           \n              error = true;\n              return;\n            }\n\n            //Objects id\n            groups.forEach((group, index) => {\n              id += (index > 0 ? \"_\" : \" \") + data[group].toLowerCase();\n            });\n\n            object[id] = {};\n\n            select.forEach((group) => {\n              let otherValues = (groupedData[id] && groupedData[id][group]) || [];\n              object[id] = { ...object[id], [group]: [...otherValues, data[group]] };\n            });\n\n            //Pass data to groupedData\n            Object.assign(groupedData, object);\n\n          break;\n          //Type stop: If there's no error plot the chart\n          case \"stop\":\n\n          if (error === false) {\n            const newChartData = [];\n\n              Object.keys(groupedData).forEach((data) => {\n              const obj = groupedData[data];\n              const result = [];\n\n              //Populate the chart legend\n              select.forEach((legend) => {\n                //Format data \n                let name = regName((data + \" \" + legend));\n                result.push({\n                  name: name,\n                  type: \"line\",\n                  data: obj[legend],\n                });\n              });\n\n              newChartData.push(...result);\n             \n            });\n            setChartData({ ...chartData, series: newChartData });\n            alert.success(\"Chart generated!\");\n           \n            Editor.clearHistory();\n          }\n\n          break;\n        default:\n          alert.error(\"Invalid data type! \");  \n          break;\n      }\n      Editor.setValue(value);\n    });\n  };\n  return (\n    <>    \n      <div className=\"App\">\n        <StateContext.Provider\n          value={{\n            chartData, setChartData,\n            GenerateChart,\n            Editor,\n            setEditor,\n          }} >\n      <Header />\n        <TextArea />\n        <Chart />\n      <Footer />\n   </StateContext.Provider>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","    export function regJson(val) {\r\n    return val.replace(/}/g, \"}#\").split(\"#\");\r\n    }\r\n\r\n    export function regLine(val) {\r\n        return val.replace(/\\'/g, '\"').replace(/(['\"])?([a-zA-Z0-9_]+)(['\"])?:/g, '\"$2\": ');\r\n    }\r\n\r\n    export function regName(val) {\r\n       return val.replace(/_/g, \" \");\r\n    }","export function JsonParse(val) {\r\n\r\n        if (/^[\\],:{}\\s]*$/.test(val.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\r\n    replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\r\n    replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\r\n\r\n    var data = JSON.parse(val);\r\n    return data;  \r\n   \r\n    }else{\r\n  \r\n  return false;\r\n\r\n    }\r\n    \r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport App from './App';\n\n\n// optional configuration\nconst options = {\n  // you can also just use 'bottom center'\n  position: positions.BOTTOM_CENTER,\n  timeout: 5000,\n  offset: '30px',\n  // you can also just use 'scale'\n  transition: transitions.SCALE\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <AlertProvider template={AlertTemplate} {...options}>\n    <App />\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}